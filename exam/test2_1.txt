Please take into account the following:

using class materials, additional Erlang files, any source from the internet are not allowed!
Task no. 0:
Copy the following declaration form to your Erlang file and fill in the required data:

%% <Name>
%% <Neptun ID>
%% <DDS, TEST2>
%% <28.11.2018.>
%% This solution was submitted and prepared by <Name, Neptun ID> for the DDS Parallel Test.
%% I declare that this solution is my own work.
%% I have not copied or used third-party solutions.
%% I have not passed my solution to my classmates, neither made it public.
%% Students’ regulation of Eötvös Loránd University (ELTE Regulations Vol. II. 74/C. § ) states that as long as a student presents another student’s work - or at least the significant part of it - as his/her own performance, it will count as a disciplinary fault. The most serious consequence of a disciplinary fault can be a dismissal of the student from the University.
The link of the documentation.
Task no. 1: Filtering
Define a function pfilter/2 that takes a predicate function F and a list L as arguments. The functions (let us call it as the parent process) spawns as many processes as the number of elements of the list. Each process evaluates the predicate function on an element of the list and answers to its parent process whether the result of function F is true or false. The parent process puts the element into the result list if function F is evaluated to true.

Do not use additional list traversing (filtering on the list of received elements) in the parent process! A single reverse is allowed if needed.

The ordering between the elements of the list must be preserved!

Test cases:
test2:pfilter(fun erlang:is_atom/1, []) == []
test2:pfilter(fun erlang:is_atom/1, [1, apple, 13, pear]) == [apple,pear]
test2:pfilter(fun(X) -> X < 2 end, [1,0,1]) == [1,0,1]
test2:pfilter(fun(X) -> X < 2 end, [3,2]) == []
test2:pfilter(fun(X) -> X < 2 end, [3,1,2,3,4,1,3,1,0]) == [1,1,1,0]
Task no. 2: Parallel composition
Look into the following definition of the composition function. It takes a list of functions (Funs) and a list of values (Values) as an argument. It takes an element from the Values list and applies all the functions from Funs on the element after each other. For example: let Funs be [F, G, H] and List be [1,2], then the return value is [H(G(F(1))), H(G(F(2)))].

composition(_, []) ->
	[];
composition(Funs, [Val | Values]) ->
	[ composition_single(Funs, Val) | composition(Funs, Values)].

composition_single(Funs, Value) ->
	lists:foldl(fun(F, Acc) -> F(Acc) end, Value, Funs).
test2:composition([fun(X) -> X+1 end, fun(X) -> X*2 end], [1,13,232,3]) == [4,28,466,8]
test2:composition([fun(X) -> X+1 end, fun(X) -> X+2 end], [1,2,3]) == [4,5,6]
test2:composition([], [1,2,3]) == [1,2,3]
test2:composition([fun(X) -> X+1 end, fun(X) -> X+2 end], [1,13,232,3]) == [4,16,235,6]
test2:composition([fun(X) -> X+1 end, fun(X) -> 0 end], [1,13,232,3]) == [0,0,0,0]
test2:composition([fun(X) -> X+1 end, fun(X) -> X * 2 end], []) == []
Your task is to implement the parallel equivalent of this function pcomposition/2 in the following way:

spawn as many processes as the number of functions in the Funs list, send all the data from Values list to the first process (element by element and not as a whole list), and wait for all computed values arriving back from the last process (again element by element and not as a single list).
each spawned process waits for a data, evaluates its function and sends the result to the next function to evaluate
after these steps the process waits for the next message and do the same steps
test2:pcomposition([fun(X) -> X+1 end, fun(X) -> X*2 end], [1,13,232,3]) == [4,28,466,8]
test2:pcomposition([fun(X) -> X+1 end, fun(X) -> X+2 end], [1,2,3]) == [4,5,6]
test2:pcomposition([], [1,2,3]) == [1,2,3]
test2:pcomposition([fun(X) -> X+1 end, fun(X) -> X+2 end], [1,13,232,3]) == [4,16,235,6]
test2:pcomposition([fun(X) -> X+1 end, fun(X) -> 0 end], [1,13,232,3]) == [0,0,0,0]
test2:pcomposition([fun(X) -> X+1 end, fun(X) -> X * 2 end], []) == []
Task no. 3: Stopping processes
Implement a mechanism to stop the started processes in Task 2.

Task no. 4: GC
Implement a garbage collector for Task 1. The garbage collector is a separate process, started by the parent process. Once a value received that has a false predicate result, the value is sent to the garbage collector process and simply printed out.